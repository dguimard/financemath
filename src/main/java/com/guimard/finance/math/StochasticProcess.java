package com.guimard.finance.math;public abstract class StochasticProcess {    int T;    double dt;    double X_0;    double[] path;    public StochasticProcess(int T, double dt, double X_0) {        this.T = T;        this.dt = dt;        this.X_0 = X_0;        path = new double[T + 1];  //allocate the path array        path[0] = X_0;    }    public int get_T() {        return T;    }    /**     * <p>Size of time step.</p>     */    public double get_dt() {        return dt;    }    public double get_X_0() {        return X_0;    }    public double[] get_path() {        return path;    }    public void simulationInit(int t) {    }    public abstract void timeStep(int t);    public void newPathBranch(int t) {        for (int u = t; u < T; u++) timeStep(u);    }    public void newPath() {        newPathBranch(0);    }    public void timeStep(int t, int s) {        for (int u = t; u < s; u++) timeStep(u);    }    public void pathSegment(int t, int s) {        for (int u = t; u < s; u++) timeStep(u);    }    public int pathSegment(int t, StoppingTime tau) {        int s = t;        while (!tau.stop(s)) {            timeStep(s);            s++;        }        return s;    }    public int pathSegment(StoppingTime tau) {        return pathSegment(0, tau);    }    public RandomVariable sampledAt(final StoppingTime tau) {        RandomVariable X_tau = new RandomVariable() {            /** the random draw defining X_tau */            public double getValue(int t) {                int s = pathSegment(t, tau);                return path[s];            }        }; //end X_tau        return X_tau;    }}