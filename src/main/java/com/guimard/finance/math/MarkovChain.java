package com.guimard.finance.math; public abstract class MarkovChain extends StochasticProcess{            public MarkovChain(int T, double j_0){ super(T,1,j_0); }                    /** <p>q(t,i,j) is the probability at time t that      *  the chain moves from state i to state j.</p>      *      * @param t current time      * @param i current state      * @param j next state      */      public abstract double q(int t, int i, int j);          /** <p>Given u in [0,1) returns the index j of the interval      *  I_j containing u (see {@link <a href=#transition>transition</a>}).      *  Here j is viewed as a double.</p>      */     private int j(int t, int i, double u)     {         int j=0; double sum=0;         while(sum<u){ sum+=q(t,i,j); j++; }         return j-1;            } //end j               /** <p>Evolves the path of the chain from time t to time t+1.      *  See {@link <a href=#transition>transition</a>}.</p>      */     public void timeStep(int t)     {         int i=(int)path[t];         //current state         double u=Random.U1();       //uniform draw from [0,1)         path[t+1]=j(t,i,u);         //next state            } //end timeStep            } // end MarkovChain             