/* WARANTY NOTICE AND COPYRIGHTThis program is free software; you can redistribute it and/ormodify it under the terms of the GNU General Public Licenseas published by the Free Software Foundation; either version 2of the License, or (at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program; if not, write to the Free SoftwareFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.Copyright (C) Michael J. Meyermatmjm@mindspring.comspyqqqdia@yahoo.com*//* * Random.java * * Created on January 26, 2002, 4:00 PM */  package com.guimard.finance.math;import cern.jet.random.*;import cern.jet.random.engine.MersenneTwister; /** <p>Provides static methods to generate random numbers based on the  * cern.jet.random random number generators.</p> * * <p>Two uniform random number generators (MersenneTwisters with different * seeds) are allocated to support the Box Muller standard normal random number * generator with "more independent" uniform coordinates v1, v2. * This shows slight improvement versus repeated calls to the same uniform * random number gnerator.</p> * * <p>The two uniform random number generators are seeded statically and so  * cycle through the same sequences of random numbers when restarted. * The same is true of the standard normal random numbers derived from these. * </p> * * @author  Michael J. Meyer */public class Random{        static double Y=0;         //second normal deviate from Box-Muller    static boolean New=true;   //flag indicating wether a new normal deviate                                // has to be computed (otherwise Y is reported)                  /** <p>First MersenneTwister uniform random number generator.</p>     */    public  static final Uniform     uniform_1=new Uniform(new MersenneTwister(113));        /** <p>Second MersenneTwister uniform random number generator.</p>     */    public  static final Uniform     uniform_2=new Uniform(new MersenneTwister(2113));        /** <p>First uniform u\in(0,1).</p>     */    public static double U1(){ return uniform_1.nextDouble(); }        /** <p>Second uniform u\in(0,1).</p>     */    public static double U2(){ return uniform_2.nextDouble(); }    /** Fair draw from {1,-1}.     */    public static int Sign()    {         double x=U1(); return (x>0.5)? 1:-1;      }        /** <p>Loaded draw X from {-1,1}.     *  X=1 with probability p,     *  X=-1 with probability 1-p.</p>     *     * @param p Probability that X=+1.     */    public static int Sign(double p)    {         double x=U1(); return (x<p)? 1:-1;      }            /**<p>Standard normal deviate using the inverse normal CDF on uniform      * deviates generated by the Mersenne Twister.</p>     */    public static double STN()    {        return FinMath.N_Inverse(uniform_1.nextDouble());                         }  //end STN()   } // end Random 