package com.guimard.finance.math;import cern.jet.random.Uniform;import cern.jet.random.engine.MersenneTwister;public class Random {    /**     * <p>First MersenneTwister uniform random number generator.</p>     */    public static final Uniform            uniform_1 = new Uniform(new MersenneTwister(113));    /**     * <p>Second MersenneTwister uniform random number generator.</p>     */    public static final Uniform            uniform_2 = new Uniform(new MersenneTwister(2113));    // has to be computed (otherwise Y is reported)    static double Y = 0;         //second normal deviate from Box-Muller    static boolean New = true;   //flag indicating wether a new normal deviate    /**     * <p>First uniform u\in(0,1).</p>     */    public static double U1() {        return uniform_1.nextDouble();    }    /**     * <p>Second uniform u\in(0,1).</p>     */    public static double U2() {        return uniform_2.nextDouble();    }    /**     * Fair draw from {1,-1}.     */    public static int Sign() {        double x = U1();        return (x > 0.5) ? 1 : -1;    }    /**     * <p>Loaded draw X from {-1,1}.     * X=1 with probability p,     * X=-1 with probability 1-p.</p>     *     * @param p Probability that X=+1.     */    public static int Sign(double p) {        double x = U1();        return (x < p) ? 1 : -1;    }    /**     * <p>Standard normal deviate using the inverse normal CDF on uniform     * deviates generated by the Mersenne Twister.</p>     */    public static double STN() {        return FinMath.N_Inverse(uniform_1.nextDouble());    }  //end STN() } // end Random 